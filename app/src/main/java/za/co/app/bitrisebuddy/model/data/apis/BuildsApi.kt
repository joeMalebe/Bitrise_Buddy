/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: Bitrise API
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package za.co.app.bitrisebuddy.model.data.apis

import retrofit2.Response
import retrofit2.http.GET
import retrofit2.http.Header
import retrofit2.http.Headers
import retrofit2.http.POST
import za.co.app.bitrisebuddy.model.data.models.*

@JvmSuppressWildcards
interface BuildsApi {
    /**
     * Abort a specific build
     * Abort a specific build. Set an abort reason with the `abort_reason` parameter. Use the `abort_with_success` parameter to abort a build but still count it as a successful one.
     * The endpoint is owned by defaultname service owner
     * @param appSlug App slug (required)
     * @param buildSlug Build slug (required)
     * @param buildAbortParams Build abort parameters (required)
     */
    @Headers(
        "X-Operation-ID: build-abort",
      "Content-Type: application/json"
    )
    @POST("apps/{app-slug}/builds/{build-slug}/abort")
    suspend fun buildAbort(
        @retrofit2.http.Path("app-slug") appSlug: String,
        @retrofit2.http.Path("build-slug") buildSlug: String,
        @retrofit2.http.Body buildAbortParams: V0BuildAbortParams
    ): V0BuildAbortResponseModel
    /**
     * Get the bitrise.yml of a build
     * Get the bitrise.yml file of one of the builds of a given app. This will return the `bitrise.yml` configuration with which the build ran. You can compare it to [the current bitrise.yml configuration](https://api-docs.bitrise.io/#/application/app-config-datastore-show) of the app.
     * The endpoint is owned by defaultname service owner
     * @param appSlug App slug (required)
     * @param buildSlug Build slug (required)
     */
    @Headers(
        "X-Operation-ID: build-bitrise-yml-show"
    )
    @GET("apps/{app-slug}/builds/{build-slug}/bitrise.yml")
    suspend fun buildBitriseYmlShow(
        @retrofit2.http.Path("app-slug") appSlug: String,
        @retrofit2.http.Path("build-slug") buildSlug: String
    ): String
    /**
     * List all builds of an app
     * List all the builds of a specified Bitrise app. Set parameters to filter builds: for example, you can search for builds run with a given workflow or all builds that were triggered by Pull Requests. It returns all the relevant data of the build.
     * The endpoint is owned by defaultname service owner
     * @param appSlug App slug (required)
     * @param sortBy Order of builds: sort them based on when they were created or the time when they were triggered (optional)
     * @param branch The branch which was built (optional)
     * @param workflow The name of the workflow used for the build (optional)
     * @param commitMessage The commit message of the build (optional)
     * @param triggerEventType The event that triggered the build (push, pull-request, tag) (optional)
     * @param pullRequestId The id of the pull request that triggered the build (optional)
     * @param buildNumber The build number (optional)
     * @param after List builds run after a given date (Unix Timestamp) (optional)
     * @param before List builds run before a given date (Unix Timestamp) (optional)
     * @param status The status of the build: not finished (0), successful (1), failed (2), aborted with failure (3), aborted with success (4) (optional)
     * @param next Slug of the first build in the response (optional)
     * @param limit Max number of elements per page (default: 50) (optional)
     */
    @Headers(
        "X-Operation-ID: build-list"
    )
    @GET("apps/{app-slug}/builds")
    suspend fun buildList(
        @retrofit2.http.Path("app-slug") appSlug: String,
        @retrofit2.http.Query("sort_by") sortBy: String?,
        @retrofit2.http.Query("branch") branch: String?,
        @retrofit2.http.Query("workflow") workflow: String?,
        @retrofit2.http.Query("commit_message") commitMessage: String?,
        @retrofit2.http.Query("trigger_event_type") triggerEventType: String?,
        @retrofit2.http.Query("pull_request_id") pullRequestId: Int?,
        @retrofit2.http.Query("build_number") buildNumber: Int?,
        @retrofit2.http.Query("after") after: Int?,
        @retrofit2.http.Query("before") before: Int?,
        @retrofit2.http.Query("status") status: Int?,
        @retrofit2.http.Query("next") next: String?,
        @retrofit2.http.Query("limit") limit: Int?,
        @Header("Authorization") accessToken : String
    ): Response<V0BuildListResponseModel>
    /**
     * List all builds
     * List all the Bitrise builds that can be accessed with the authenticated account. Filter builds based on their owner, using the owner slug, or the status of the build.
     * The endpoint is owned by defaultname service owner
     * @param ownerSlug The slug of the owner of the app or apps (optional)
     * @param isOnHold Indicates whether the build has started yet (true: the build hasn&#39;t started) (optional)
     * @param status The status of the build: not finished (0), successful (1), failed (2), aborted with failure (3), aborted with success (4) (optional)
     * @param next Slug of the first build in the response (optional)
     * @param limit Max number of elements per page (default: 50) (optional)
     */
    @Headers(
        "X-Operation-ID: build-list-all"
    )
    @GET("builds")
    suspend fun buildListAll(
        @retrofit2.http.Query("owner_slug") ownerSlug: String?,
        @retrofit2.http.Query("is_on_hold") isOnHold: Boolean?,
        @retrofit2.http.Query("status") status: Int?,
        @retrofit2.http.Query("next") next: String?,
        @retrofit2.http.Query("limit") limit: Int?,
        @Header("Authorization") accessToken : String
    ): Response<V0BuildListAllResponseModel>
    /**
     * Get the build log of a build
     * Get the build log of a specified build of a Bitrise app. You can get the build slug either by calling the [/builds](https://api-docs.bitrise.io/#/builds/build-list) endpoint or by clicking on the build on bitrise.io and copying the slug from the URL.
     * The endpoint is owned by defaultname service owner
     * @param appSlug App slug (required)
     * @param buildSlug Build slug (required)
     */
    @Headers(
        "X-Operation-ID: build-log"
    )
    @GET("apps/{app-slug}/builds/{build-slug}/log")
    suspend fun buildLog(
        @retrofit2.http.Path("app-slug") appSlug: String,
        @retrofit2.http.Path("build-slug") buildSlug: String
    ): Unit
    /**
     * Get a build of a given app
     * Get the specified build of a given Bitrise app. You need to provide both an app slug and a build slug. You can get the build slug either by calling the [/builds](https://api-docs.bitrise.io/#/builds/build-list) endpoint or by clicking on the build on bitrise.io and copying the slug from the URL. The endpoint returns all the relevant data of the build.
     * The endpoint is owned by defaultname service owner
     * @param appSlug App slug (required)
     * @param buildSlug Build slug (required)
     */
    @Headers(
        "X-Operation-ID: build-show"
    )
    @GET("apps/{app-slug}/builds/{build-slug}")
    suspend fun buildShow(
        @retrofit2.http.Path("app-slug") appSlug: String,
        @retrofit2.http.Path("build-slug") buildSlug: String
    ): V0BuildShowResponseModel
    /**
     * Trigger a new build
     * Trigger a new build. Specify an app slug and at least one parameter out of three: a git tag or git commit hash, a branch, or a workflow ID. You can also set specific parameters for Pull Request builds and define additional environment variables for your build. [Check out our detailed guide](https://devcenter.bitrise.io/api/build-trigger/).
     * The endpoint is owned by defaultname service owner
     * @param appSlug App slug (required)
     * @param buildParams Build trigger parameters (required)
     */
    @Headers(
        "X-Operation-ID: build-trigger",
      "Content-Type: application/json"
    )
    @POST("apps/{app-slug}/builds")
    suspend fun buildTrigger(
        @retrofit2.http.Path("app-slug") appSlug: String,
        @retrofit2.http.Body buildParams: V0BuildTriggerParams,
        @Header("Authorization") accessToken : String
    ): Response<V0BuildTriggerRespModel>
    /**
     * List the workflows of an app
     * List the workflows that were triggered at any time for a given Bitrise app. Note that it might list workflows that are currently not defined in the app's `bitrise.yml` configuration - and conversely, workflows that were never triggered will not be listed even if they are defined in the `bitrise.yml` file.
     * The endpoint is owned by defaultname service owner
     * @param appSlug App slug (required)
     */
    @Headers(
        "X-Operation-ID: build-workflow-list"
    )
    @GET("apps/{app-slug}/build-workflows")
    suspend fun buildWorkflowList(
        @retrofit2.http.Path("app-slug") appSlug: String,
        @Header("Authorization") accessToken: String
    ): Response<V0BuildWorkflowListResponseModel>
}
