/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: Bitrise API
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package za.co.app.bitrisebuddy.model.data.apis

import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.Headers
import retrofit2.http.PATCH
import retrofit2.http.POST
import za.co.app.bitrisebuddy.model.data.models.V0ProvProfileDocumentUpdateParams
import za.co.app.bitrisebuddy.model.data.models.V0ProvisionProfileListResponseModel
import za.co.app.bitrisebuddy.model.data.models.V0ProvisionProfileResponseModel
import za.co.app.bitrisebuddy.model.data.models.V0ProvisionProfileUploadParams

@JvmSuppressWildcards
interface ProvisioningProfileApi {
    /**
     * Confirm a provisioning profile upload
     * This is the last step of the upload process. Confirm the provisioning profile upload and view the file on the Code Signing tab of a specific app. Read more in our [Confirming the iOS code signing file upload](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     * The endpoint is owned by defaultname service owner
     * @param appSlug App slug (required)
     * @param provisioningProfileSlug Provisioning profile slug (required)
     */
    @Headers(
        "X-Operation-ID: provisioning-profile-confirm",
      "Content-Type: application/json"
    )
    @POST("apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}/uploaded")
    suspend fun provisioningProfileConfirm(
        @retrofit2.http.Path("app-slug") appSlug: String,
        @retrofit2.http.Path("provisioning-profile-slug") provisioningProfileSlug: String
    ): V0ProvisionProfileResponseModel
    /**
     * Create a provisioning profile
     * Create a temporary pre-signed upload URL (expires in 10 minutes) for the provisioning profile and upload it to AWS with a simple `curl` request. To complete the upload process, continue with the [POST /apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}/uploaded](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-confirm) endpoint. Read more in our [Creating and uploading an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#creating--uploading-an-ios-code-signing-file) guide.
     * The endpoint is owned by defaultname service owner
     * @param appSlug App slug (required)
     * @param provisioningProfile Provisioning profile parameters such as file name and file size (required)
     */
    @Headers(
        "X-Operation-ID: provisioning-profile-create",
      "Content-Type: application/json"
    )
    @POST("apps/{app-slug}/provisioning-profiles")
    suspend fun provisioningProfileCreate(
        @retrofit2.http.Path("app-slug") appSlug: String,
        @retrofit2.http.Body provisioningProfile: V0ProvisionProfileUploadParams
    ): V0ProvisionProfileResponseModel
    /**
     * Delete a provisioning profile
     * Delete an app's provisioning profile. You can fetch the provisioning profile's slug if you call the [GET /apps/{app-slug}/provisioning-profiles](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-list) endpoint. Read more in our [Deleting an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#deleting-an-ios-code-signing-file) guide.
     * The endpoint is owned by defaultname service owner
     * @param appSlug App slug (required)
     * @param provisioningProfileSlug Provisioning profile slug (required)
     */
    @Headers(
        "X-Operation-ID: provisioning-profile-delete"
    )
    @DELETE("apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}")
    suspend fun provisioningProfileDelete(
        @retrofit2.http.Path("app-slug") appSlug: String,
        @retrofit2.http.Path("provisioning-profile-slug") provisioningProfileSlug: String
    ): V0ProvisionProfileResponseModel
    /**
     * Get a list of the provisioning profiles
     * List all the provisioning profiles that have been uploaded to a specific app. Read more in our [Listing the uploaded iOS code signing files of an app](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#listing-the-uploaded-ios-code-signing-files-of-an-app) guide.
     * The endpoint is owned by defaultname service owner
     * @param appSlug App slug (required)
     * @param next Slug of the first provisioning profile in the response (optional)
     * @param limit Max number of elements per page (default: 50) (optional)
     */
    @Headers(
        "X-Operation-ID: provisioning-profile-list"
    )
    @GET("apps/{app-slug}/provisioning-profiles")
    suspend fun provisioningProfileList(
        @retrofit2.http.Path("app-slug") appSlug: String,
        @retrofit2.http.Query("next") next: String?,
        @retrofit2.http.Query("limit") limit: Int?
    ): V0ProvisionProfileListResponseModel
    /**
     * Get a specific provisioning profile
     * Retrieve data of a specific provisioning profile. You can fetch the provisioning profile's slug if you call the [GET /apps/{app-slug}/provisioning-profiles](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-list) endpoint. Read more in our [Getting a specific iOS code signing file's data](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#getting-a-specific-ios-code-signing-files-data) guide.
     * The endpoint is owned by defaultname service owner
     * @param appSlug App slug (required)
     * @param provisioningProfileSlug Provisioning profile slug (required)
     */
    @Headers(
        "X-Operation-ID: provisioning-profile-show"
    )
    @GET("apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}")
    suspend fun provisioningProfileShow(
        @retrofit2.http.Path("app-slug") appSlug: String,
        @retrofit2.http.Path("provisioning-profile-slug") provisioningProfileSlug: String
    ): V0ProvisionProfileResponseModel
    /**
     * Update a provisioning profile
     * Update an uploaded provisioning profile's attributes. You can fetch the provisioning profile's slug if you call the [GET /apps/{app-slug}/provisioning-profiles](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-list) endpoint. Read more in our [Updating an uploaded iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     * The endpoint is owned by defaultname service owner
     * @param appSlug App slug (required)
     * @param provisioningProfileSlug Provisioning profile slug (required)
     * @param provisioningProfile Provisioning profile parameters (required)
     */
    @Headers(
        "X-Operation-ID: provisioning-profile-update",
      "Content-Type: application/json"
    )
    @PATCH("apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}")
    suspend fun provisioningProfileUpdate(
        @retrofit2.http.Path("app-slug") appSlug: String,
        @retrofit2.http.Path("provisioning-profile-slug") provisioningProfileSlug: String,
        @retrofit2.http.Body provisioningProfile: V0ProvProfileDocumentUpdateParams
    ): V0ProvisionProfileResponseModel
}
